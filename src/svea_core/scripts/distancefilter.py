import numpy as np
from scipy.signal import savgol_filter
import matplotlib.pyplot as plt

# Example data: simulate noisy distance measurements over time
t = [1717754654.6329522, 1717754654.7759376, 1717754654.8481295, 1717754654.921973, 1717754654.99537, 1717754655.0873785, 1717754655.1538665, 1717754655.2141197, 1717754655.336959, 1717754655.404368, 1717754655.489123, 1717754655.545196, 1717754655.612513, 1717754655.6422708, 1717754655.6758475, 1717754655.7222264, 1717754655.7864113, 1717754655.8489733, 1717754655.8807569, 1717754655.9252367, 1717754655.9672549, 1717754656.0682037, 1717754656.1444669, 1717754656.2654817, 1717754656.3964312, 1717754656.5014887, 1717754656.618634, 1717754656.684711, 1717754656.7883515, 1717754656.8384883, 1717754656.92292, 1717754656.9845743, 1717754657.086232, 1717754657.1414843, 1717754657.1870663, 1717754657.2590058, 1717754657.346678, 1717754657.4116778, 1717754657.4640753, 1717754657.5286717, 1717754657.589692, 1717754657.6709201, 1717754657.7157884, 1717754657.8127022, 1717754657.8425934, 1717754657.919804, 1717754657.9819021, 1717754658.0491862, 1717754658.084194, 1717754658.1530654, 1717754658.2544723, 1717754658.3345094, 1717754658.3839285, 1717754658.4303634, 1717754658.5115924, 1717754658.5776548, 1717754658.6850474, 1717754658.7900913, 1717754658.8205373, 1717754658.92178, 1717754658.9765837, 1717754659.0224326, 1717754659.055467, 1717754659.0854661, 1717754659.1318743, 1717754659.169023, 1717754659.2070642, 1717754659.2601783, 1717754659.2939038, 1717754659.3269234, 1717754659.38672, 1717754659.4700685, 1717754659.552383, 1717754659.6021569, 1717754659.6552892, 1717754659.7181337, 1717754659.744198, 1717754659.7755778, 1717754659.822067, 1717754659.8521183, 1717754659.8740582, 1717754659.9150462, 1717754659.9706464, 1717754660.0822687, 1717754660.1513407, 1717754660.1980438, 1717754660.2424743, 1717754660.2632008, 1717754660.292463, 1717754660.319875, 1717754660.4028566, 1717754660.4479036, 1717754660.5189373, 1717754660.5467868, 1717754660.5823553, 1717754660.6302998, 1717754660.674336, 1717754660.7207472, 1717754660.7508628, 1717754660.7935085, 1717754660.8226311, 1717754660.8529952, 1717754660.8971941, 1717754660.9229634, 1717754660.956485, 1717754660.9880855, 1717754661.0195282, 1717754661.0516815, 1717754661.0970104, 1717754661.1337438, 1717754661.1687655, 1717754661.196726, 1717754661.2465749, 1717754661.2731528, 1717754661.31147, 1717754661.3423915, 1717754661.371962, 1717754661.3981376, 1717754661.434159, 1717754661.4485946, 1717754661.5153568, 1717754661.543847, 1717754661.5711126, 1717754661.6034672, 1717754661.6300168, 1717754661.7435842, 1717754661.7980003, 1717754661.8309107, 1717754661.8523116, 1717754661.8795562, 1717754661.9084492, 1717754661.9455357]
d = [0.29985155629144794, 0.3228370071799435, 0.46244830098410433, 0.5130293466313645, 0.5639258646081249, 0.5973199505247466, 0.646443623621044, 0.6754508680743914, 0.6481501708948199, 0.720593070574689, 0.6944666606311343, 0.7491425074564899, 0.7237542198319966, 0.7473611546503904, 0.7432147227636916, 0.7204105091118569, 0.7090395376826084, 0.676889911735701, 0.7023881545602995, 0.6962997001339399, 0.7029477766700774, 0.6268482897786203, 0.6467988249918062, 0.5292209039480957, 0.5388703533154546, 0.49441898199628637, 0.42659263872550374, 0.43667710391839104, 0.3615993985629789, 0.3905260498381649, 0.3796051886605188, 0.36031478504075604, 0.3561676428906931, 0.37687056303392535, 0.3732227892315814, 0.35315664063366575, 0.33447236639474315, 0.3784016296711224, 0.39209630270772494, 0.4018233882688305, 0.39521091649175927, 0.3817705731977504, 0.4042608823561114, 0.36365234177176325, 0.42713927438405125, 0.40039177347760796, 0.3505299081540912, 0.35190835841526696, 0.38039283049242273, 0.31251014995736776, 0.3059223094692641, 0.2768924651983065, 0.2649237577319406, 0.2362014296156854, 0.24373397255911639, 0.19897765553345065, 0.13686785408173013, 0.1572040717231314, 0.21991753106292117, 0.1508471483526604, 0.19376197609635765, 0.21141608631300796, 0.20277947179892203, 0.20941915773608138, 0.195843438194286, 0.2248974020522379, 0.23704564516200916, 0.23525297667711415, 0.2646278983129154, 0.2472099195534268, 0.251581229611422, 0.23901160261727555, 0.17489183402879044, 0.2152390321875533, 0.15703601488626867, 0.17202655803692207, 0.1814297417373501, 0.16695051225486052, 0.13104015042264178, 0.13735496596306068, 0.12932980299744817, 0.08055223222537916, 0.09957476959737194, 0.0736252669899356, 0.14686078151392207, 0.17651711676062015, 0.18770324650011522, 0.21496714006661383, 0.21916567337003362, 0.2321161433183388, 0.24720869962611652, 0.2656705026104456, 0.25207971583751104, 0.2507663415738122, 0.24125308250992533, 0.2407030444873744, 0.2172442828070585, 0.23540324333697332, 0.19888267593392844, 0.20017854373156557, 0.19874965703304054, 0.15352353027119642, 0.1392698512830018, 0.11008092225595317, 0.09392771830864338, 0.08972929122766954, 0.08602862126600891, 0.08406608602934168, 0.08878728821293064, 0.11126184231590469, 0.11743555403736644, 0.14308433361985157, 0.16300115785513808, 0.20340932349634483, 0.22170255031488378, 0.2534624877431398, 0.2672450689769182, 0.2878979773378914, 0.29958427221346523, 0.31990511474425426, 0.29206313396325784, 0.3263330280224846, 0.3310570517161285, 0.32000258169977763, 0.31193527279735883, 0.19509304866917782, 0.1874694206844339, 0.19591784561693687, 0.19825932477758174, 0.17469000679705432, 0.15782636014487644, 0.14573138307265304]
d = np.array(d)


d = np.array([0.29979965210316123, 0.3708950580957982, 0.3880371464931696, 0.3992784545267562, 0.41073847927576407, 0.43298251138711014, 0.44547749415081134, 0.4627245888994939, 0.4751264172731385, 0.49156748465696604, 0.5049641305959378, 0.516298666504371, 0.533952120143403, 0.5319818568338746, 0.5422111161316099, 0.5477101957176578, 0.5523290981109055, 0.5662629884259822, 0.5469006375654466, 0.6027046872713919, 0.6214358931964861, 0.6071899427810019, 0.5846224805697522, 0.6173335382479896, 0.6277961785190966, 0.594646448044797, 0.642294125429725, 0.679838520872525, 0.6735053701785014, 0.6897212802593016, 0.611223585969054, 0.6103658257700559, 0.6272637660918281, 0.6520281433363453, 0.6210773644471448, 0.5560760104901885, 0.5153642744283495, 0.5486500931303173, 0.45225897060831627, 0.531434701970529, 0.46635583096681704, 0.49798658958848946, 0.49854976604110474, 0.47833241753404715, 0.431562819485311, 0.4312681021878298, 0.4630315897698892, 0.398682222658233, 0.4356651671701453, 0.4533556126089933, 0.42173048337592106, 0.44354116005566563, 0.456291161680541, 0.4951287133644205, 0.5161330003376727, 0.43181547602442755, 0.5048875138458004, 0.5013076374882732, 0.5044500689934586, 0.473204236898978, 0.5039799926114938, 0.47893678454082106, 0.4425791784145375, 0.45249703518307954, 0.4724147354727071, 0.4533959425655459, 0.4176673743693529, 0.35777117270145525, 0.41215268093524743, 0.4056660783042359, 0.3675407681718415, 0.33011210791644247, 0.28540157752916945, 0.3220714545684194, 0.2625522964562695, 0.24957866179524474, 0.2744839932569361, 0.30373009217847785, 0.35455956881200273, 0.3654960855360219, 0.2658115669117372, 0.32628579091096893, 0.4219914061126742, 0.40044759888602394, 0.37914064475486137, 0.38188457014397664, 0.39123491231386326, 0.3959469293611127, 0.3344888570690088, 0.35405150116713885, 0.3180414815853794, 0.3183865126347641, 0.3073731814043102, 0.27286498142574694, 0.23476370309997457, 0.2033141708086495, 0.20834310559065178, 0.19349435039587776, 0.22254370822884867, 0.09338084438432831, 0.32302145771838014, 0.3100358023217929, 0.31436727786143753, 0.33584807726981564, 0.37804792900462286, 0.44721083681793045, 0.4256635538931642, 0.4431952013034744, 0.44586528393966046, 0.45458242547212696, 0.43412978842732725, 0.4397628742955611, 0.47018589646966086, 0.47306901076831914, 0.4259754269675902, 0.40344717737073826, 0.4947936232151909, 0.41915346894285116, 0.4141445820551935])

# Parameters for Savitzky-Golay filter
window_length = 21  # choose an odd number, typically between 5 and 31
polyorder = 2  # polynomial order, typically between 2 and 5

res = [t[i + 1] - t[i] for i in range(len(t)-1)]
print(sum(res)/len(res))

# Apply Savitzky-Golay filter to smooth the distance measurements
d_smooth = savgol_filter(d, window_length, polyorder)

# Compute the logarithm of the smoothed distance
log_d_smooth = np.log(d_smooth)
print(np.log(d_smooth))
# Apply Savitzky-Golay filter to estimate the first derivative of log(distance)
d_log_d_dt = savgol_filter(log_d_smooth, window_length, polyorder, deriv=1, delta=t[-1]-t[-2])


#log_derivative = np.gradient(log_d_smooth, t)
#log_derivative = savgol_filter(log_derivative, window_length, polyorder)

# Get the estimate at the current time (last point)
current_time_index = -1
estimate_current_time = d_log_d_dt[current_time_index]

print(f"Estimate of d(log(d(t)))/dt at current time t = {t[current_time_index]}: {estimate_current_time}")


op = np.array([0.29979965210316123, 0.3708950580957982, 0.3880371464931696, 0.3992784545267562, 0.41073847927576407, 0.43298251138711014, 0.44547749415081134, 0.4627245888994939, 0.4751264172731385, 0.49156748465696604, 0.5049641305959378, 0.516298666504371, 0.533952120143403, 0.5319818568338746, 0.5422111161316099, 0.5477101957176578, 0.5523290981109055, 0.5662629884259822, 0.5469006375654466, 0.6027046872713919, 0.6214358931964861, 0.6071899427810019, 0.5846224805697522, 0.6173335382479896, 0.6277961785190966, 0.594646448044797, 0.642294125429725, 0.679838520872525, 0.6735053701785014, 0.6897212802593016, 0.611223585969054, 0.6103658257700559, 0.6272637660918281, 0.6520281433363453, 0.6210773644471448, 0.5560760104901885, 0.5153642744283495, 0.5486500931303173, 0.45225897060831627, 0.531434701970529, 0.46635583096681704, 0.49798658958848946, 0.49854976604110474, 0.47833241753404715, 0.431562819485311, 0.4312681021878298, 0.4630315897698892, 0.398682222658233, 0.4356651671701453, 0.4533556126089933, 0.42173048337592106, 0.44354116005566563, 0.456291161680541, 0.4951287133644205, 0.5161330003376727, 0.43181547602442755, 0.5048875138458004, 0.5013076374882732, 0.5044500689934586, 0.473204236898978, 0.5039799926114938, 0.47893678454082106, 0.4425791784145375, 0.45249703518307954, 0.4724147354727071, 0.4533959425655459, 0.4176673743693529, 0.35777117270145525, 0.41215268093524743, 0.4056660783042359, 0.3675407681718415, 0.33011210791644247, 0.28540157752916945, 0.3220714545684194, 0.2625522964562695, 0.24957866179524474, 0.2744839932569361, 0.30373009217847785, 0.35455956881200273, 0.3654960855360219, 0.2658115669117372, 0.32628579091096893, 0.4219914061126742, 0.40044759888602394, 0.37914064475486137, 0.38188457014397664, 0.39123491231386326, 0.3959469293611127, 0.3344888570690088, 0.35405150116713885, 0.3180414815853794, 0.3183865126347641, 0.3073731814043102, 0.27286498142574694, 0.23476370309997457, 0.2033141708086495, 0.20834310559065178, 0.19349435039587776, 0.22254370822884867, 0.09338084438432831, 0.32302145771838014, 0.3100358023217929, 0.31436727786143753, 0.33584807726981564, 0.37804792900462286, 0.44721083681793045, 0.4256635538931642, 0.4431952013034744, 0.44586528393966046, 0.45458242547212696, 0.43412978842732725, 0.4397628742955611, 0.47018589646966086, 0.47306901076831914, 0.4259754269675902, 0.40344717737073826, 0.4947936232151909, 0.41915346894285116, 0.4141445820551935])

plt.figure(figsize=(10, 6))

plt.subplot(3, 1, 1)
plt.plot(d, label='Noisy d(t)')
plt.plot(d_smooth, label='Smoothed d(t)')
plt.legend()
plt.title('Distance Measurements')

plt.subplot(3, 1, 2)
plt.plot(log_d_smooth, label='Smoothed log(d(t))')
plt.legend()
plt.title('Log of Smoothed Distance')

plt.subplot(3, 1, 3)
plt.plot(d_log_d_dt, label='d(log(d(t)))/dt')
#plt.plot(op, label='op')
plt.legend()
plt.title('Derivative of Log Distance')

plt.tight_layout()
plt.show()
